/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM.MySQL;

use Runtime.Date;
use Runtime.DateTime;
use Runtime.RuntimeUtils;
use Runtime.ORM.ConnectionInterface;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.Annotations.CoreType;
use Runtime.ORM.MySQL.Cursor;
use Runtime.ORM.MySQL.Settings;


class Connection implements ConnectionInterface
{
	var pdo = null;
	string last_error = "";
	int last_code = 0;
	Settings settings = null;
	
	
	
	/**
	 * Returns true if connected
	 */
	bool connected()
	{
		return this.pdo != null;
	}
	
	
	
	/**
	 * Connect by provider
	 */
	async static Connection connect(Settings db_settings)
	{
		Connection conn = new Connection();
		
		#switch
		#case ifcode PHP then
		
		$conn->settings = $db_settings;
		$conn->pdo = null;
		$conn->last_error = "";
		$conn->last_code = 0;
		try
		{
			$str = 'mysql:host='.$db_settings->host;
			if ($db_settings->port != null) $str .= ':'.$db_settings->port;
			if ($db_settings->db != null) $str .= ';dbname='.$db_settings->db;
			$conn->pdo = new \PDO
			(
				$str, $db_settings->username, $db_settings->password, 
				array
				(
					\PDO::ATTR_PERSISTENT => false
				)
			);
			$conn->pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
			$conn->pdo->exec("set names utf8");
		}
		catch (\PDOException $e)
		{
			$conn->pdo = null;
			$conn->last_error = 'Failed connected to database!';
			$conn->last_code = $e->getCode();
		}
		catch (\Excepion $e)
		{
			$conn->pdo = null;
			$conn->last_error = $e->getMessage();
			$conn->last_code = -1;
		}
		
		#endswitch
		
		return conn;
	}
	
	
	
	/**
	 * Process item from database
	 */
	async var fromDatabase(string type, var item, CoreType core_type)
	{
		if (type == "json")
		{
			if (item == null) return null;
			item = RuntimeUtils::json_decode(item);
			return item;
		}
		else if (type == "date")
		{
			if (rs::strlen(item) != 10) return null;
			return new Date
			{
				"y": rs::substr(item, 0, 4),
				"m": rs::substr(item, 5, 2),
				"d": rs::substr(item, 8, 2),
			}
		}
		else if (type == "datetime")
		{
			if (rs::strlen(item) != 19) return null;
			return new DateTime
			{
				"y": rs::substr(item, 0, 4),
				"m": rs::substr(item, 5, 2),
				"d": rs::substr(item, 8, 2),
				"h": rs::substr(item, 11, 2),
				"i": rs::substr(item, 14, 2),
				"s": rs::substr(item, 17, 2),
			}
		}
		else if (type == "bool")
		{
			if (item == "0") return false; else return true;
		}
		return item;
	}
	
	
	
	/**
	 * Process item to database
	 */
	async var toDatabase(string type, var item, CoreType core_type)
	{
		if (type == "json")
		{
			item = RuntimeUtils::ObjectToPrimitive(item, false);
			item = RuntimeUtils::json_encode(item, 1);
			return item;
		}
		else if (type == "date")
		{
			if (item instanceof Date)
			{
				return item.normalize().getDate();
			}
			return null;
		}
		else if (type == "datetime")
		{
			if (item instanceof DateTime)
			{
				return item.normalize().getDateTime("UTC");
			}
			return null;
		}
		else if (type == "bool")
		{
			if (item) return "1"; else return "0";
		}
		return item;
	}
	
	
	
	/**
	 * Prepares SQL and return Cursor for execute
	 */
	async Cursor prepare(string sql)
	{
		#switch
		#case ifcode PHP then
		
		$st = $this->pdo->prepare($sql, array(\PDO::ATTR_CURSOR => \PDO::CURSOR_FWDONLY));
		return new Cursor($ctx, $this, $sql, $st);
		
		#endswitch
		
		return null;
	}
	
	
	
	/**
	 * Execute query
	 */
	public async Cursor query
	(
		string sql,
		Dict params = null,
		Dict db_settings = null
	)
	{
		string log_query = false;
		if (db_settings != null and db_settings.has("debug")) log_query = db_settings["debug"] |> default bool false;
		if (db_settings != null and db_settings.has("log")) log_query = db_settings["log"] |> default bool false;
		
		/* Add prefix */
		sql = rs::replace("${prefix}", this.settings.prefix, sql);
		
		/* Execute */
		Cursor cursor = await this.prepare(sql);
		await cursor.execute(params, log_query);
		
		/* Return cursor */
		return cursor;
	}
	
	
	
	/**
	 * Select query
	 */
	public async Cursor select
	(
		string table_name,
		Collection<list> filter = null,
		int start = -1, int limit = -1,
		Dict db_settings = null
	)
	{
		start = rtl::toInt(start);
		limit = rtl::toInt(limit);
		
		Map items = new Map();
		Vector v_where = new Vector();
		list res = this.convertFilter(filter);
		v_where = v_where.concat(res[0]);
		items = items.concat(res[1]);
		
		string sql = "select * from ${prefix}" ~ table_name ~ " where " ~ rs::join(" and ", v_where);
		if (limit >= 0) sql ~= " limit " ~ limit;
		if (limit >= 0 and start >= 0) sql ~= " offset " ~ start;
		
		Cursor cursor = await this.query(sql, items, db_settings);
		cursor.setKind("select");
		return cursor;
	}
	
	
	
	/**
	 * Insert query
	 */
	public async Cursor insert
	(
		string table_name,
		Dict insert,
		Dict db_settings = null
	)
	{
		Vector keys = new Vector();
		Vector values = new Vector();
		
		insert.each
		(
			void (string value, string key) use (keys, values)
			{
				keys.pushValue("`" ~ key ~ "`");
				values.pushValue(":" ~ key);
			}
		);
		
		string sql = "insert into ${prefix}" ~ table_name ~
			" (" ~ rs::join(", ", keys) ~ ") values (" ~ rs::join(", ", values) ~ ")"
		;
		
		Cursor cursor = await this.query(sql, insert, db_settings);
		cursor.setKind("insert");
		return cursor;
	}
	
	
	
	/**
	 * Update query
	 */
	public async Cursor update
	(
		string table_name,
		Collection<list> filter,
		Dict update,
		Dict db_settings = null
	)
	{
		Map items = new Map();
		Vector v_set = new Vector();
		Vector v_where = new Vector();
		
		list res = this.convertFilter(filter);
		v_where = v_where.concat(res[0]);
		items = items.concat(res[1]);
		
		update.each
		(
			void (string value, string key) use (items, v_set, v_where)
			{
				v_set.pushValue("`" ~ key ~ "` = :update_" ~ key);
				items.setValue("update_" ~ key, value);
			}
		);
		
		string sql = "update ${prefix}" ~ table_name ~ " set " ~ rs::join(", ", v_set) ~
			" where " ~ rs::join(" and ", v_where)
		;
		
		Cursor cursor = await this.query(sql, items, db_settings);
		cursor.setKind("update");
		return cursor;
	}
	
	
	
	/**
	 * Insert or update
	 */
	public async void insert_or_update
	(
		string table_name,
		Dict insert,
		Dict update,
		Dict db_settings = null
	)
	{
		Cursor c = null;
		Vector ins_keys = new Vector();
		Vector ins_values = new Vector();
		Vector where_data = new Vector();
		Vector upd_data = new Vector();
		Map items = new Map();
		Map ins_items = new Map();
		Map upd_items = new Map();
		
		insert.each
		(
			void (string value, string key) use (ins_keys, ins_values, where_data, items, ins_items)
			{
				ins_keys.pushValue("`" ~ key ~ "`");
				ins_values.pushValue(":" ~ key);
				where_data.pushValue("`" ~ key ~ "` = :" ~ key);
				items.setValue(key, value);
				ins_items.setValue(key, value);
			}
		);
		
		update.each
		(
			void (string value, string key) use (ins_keys, ins_values, upd_data, items, upd_items)
			{
				ins_keys.pushValue("`" ~ key ~ "`");
				ins_values.pushValue(":" ~ key);
				upd_data.pushValue("`" ~ key ~ "` = :" ~ key);
				items.setValue(key, value);
				upd_items.setValue(key, value);
			}
		);
		
		/* Find item */
		c = await this.query
		(
			"select * from `${prefix}" ~ table_name ~ "` where " ~ rs::join(" and ", where_data) ~ " limit 1",
			ins_items,
			db_settings
		)
		;
		Dict row = await c.fetch();
		await c.close();
		
		/* Update */
		if (row)
		{
			Vector filter = new Vector();
			ins_items.each
			(
				void (var value, string key) use (filter)
				{
					filter.pushValue([key, "=", value]);
				}
			);
			c = await this.update(table_name, filter.toCollection(), upd_items, db_settings);
			await c.close();
		}
		
		/* Insert */
		else
		{
			c = await this.insert(table_name, items, db_settings);
			await c.close();
		}
	}
	
	
	
	/**
	 * Insert or update
	 */
	public async void insert_or_update_atom
	(
		string table_name,
		Dict insert,
		Dict update,
		Dict db_settings = null
	)
	{
		Vector ins_keys = new Vector();
		Vector ins_values = new Vector();
		Vector upd_data = new Vector();
		Map items = new Map();
		
		insert.each
		(
			void (string value, string key) use (ins_keys, ins_values, items)
			{
				ins_keys.pushValue("`" ~ key ~ "`");
				ins_values.pushValue(":" ~ key);
				items.setValue(key, value);
			}
		);
		
		update.each
		(
			void (string value, string key) use (ins_keys, ins_values, upd_data, items)
			{
				ins_keys.pushValue("`" ~ key ~ "`");
				ins_values.pushValue(":" ~ key);
				upd_data.pushValue("`" ~ key ~ "` = :" ~ key);
				items.setValue(key, value);
			}
		);
		
		string sql = "insert into ${prefix}" ~ table_name ~
			" (" ~ rs::join(", ", ins_keys) ~ ")" ~
			" values (" ~ rs::join(", ", ins_values) ~ ")" ~
			(
				(upd_data.count() == 0) ? "" :
					" ON DUPLICATE KEY UPDATE " ~ rs::join(", ", upd_data)
			)
		;
		
		Cursor c = await this.query(sql, items, db_settings);
		c.close();
	}
	
	
	
	/**
	 * Delete query
	 */
	public async Cursor delete
	(
		string table_name,
		Collection<list> filter = null,
		Dict db_settings = null
	)
	{
		Map items = new Map();
		Vector v_where = new Vector();
		list res = this.convertFilter(filter);
		v_where = v_where.concat(res[0]);
		items = items.concat(res[1]);
		
		string sql = "delete from ${prefix}" ~ table_name ~ " where " ~ rs::join(" and ", v_where);
		Cursor cursor = await this.query(sql, items, db_settings);
		cursor.setKind("delete");
		return cursor;
	}
	
	
	
	/**
	 * Returns query builder sql
	 */
	string getQuerySQL(Query q)
	{
		/* Select query */
		if (q._kind == Query::QUERY_SELECT)
		{
			string sql = "SELECT ";
			Map params = new Map();
			
			/* Add found rows */
			if (q._calc_found_rows == true) sql ~= " SQL_CALC_FOUND_ROWS ";
			
			/* Add fields */
			if (q._fields != null) sql ~= rs::join(", ", q._fields.map( method this.escape ));
			
			/* New line */
			sql ~= "\n";
			
			/* Add table name */
			string table_name = q._table_name;
			sql ~= " FROM ${prefix}" ~ table_name;
			
			/* Add table alias */
			if (q._table_name_alias != "") sql ~= " AS " ~ q._table_name_alias;
			
			/* New line */
			sql ~= "\n";
			
			/* Add joins */
			if (q._join != null)
			{
				for (int i=0; i<q._join.count(); i++)
				{
					Dict join = q._join[i];
					string kind = join["kind"] |> default string "";
					string table_name = join["table_name"] |> default string "";
					string alias_name = join["alias_name"] |> default string "";
					string where = join["where"] |> default string "";
					
					if (kind == "left") sql ~= " LEFT JOIN ";
					else sql ~= " INNER JOIN ";
					
					sql ~= "${prefix}" ~ table_name;
					if (alias_name != "") sql ~= " AS " ~ alias_name;
					sql ~= " ON (" ~ where ~ ")";
					
					/* New line */
					sql ~= "\n";
				}
			}
			
			/* Add where */
			if (q._filter != null)
			{
				list res = this.convertFilter(q._filter);
				Dict where = res[0];
				params = params.concat(res[1]);
				
				string where_str = rs::join(" AND ", where);
				if (where_str != "") sql ~= " WHERE " ~ where_str;
				
				/* New line */
				sql ~= "\n";
			}
			
			/* Add order */
			if (q._order != null)
			{
				Collection order = q._order.map
				(
					string (Collection order) => order[0] ~ " " ~ order[1]
				);
				
				string order_str = rs::join(", ", order);
				if (order_str != "") sql ~= " ORDER BY " ~ order_str;
				
				/* New line */
				sql ~= "\n";
			}
			
			/* Add order */
			if (q._limit >= 0) sql ~= " LIMIT " ~ q._limit;
			if (q._limit >= 0 and q._start >= 0) sql ~= " OFFSET " ~ q._start;
			
			return [sql, params.toDict()];
		}
		
		else if (q._kind == Query::RAW_QUERY)
		{
			return [q._sql, q._params];
		}
		
		return null;
	}
	
	
	
	/**
	 * Execute query
	 */
	async Cursor executeQuery(Query q, Dict db_settings = null)
	{
		if (db_settings == null) db_settings = {};
		
		list res = this.getQuerySQL(q);
		if (res != null)
		{
			string sql = res[0];
			Dict params = res[1];
			
			/* Set debug log */
			if (q._log) db_settings <= log <= true;
			
			/* Select query */
			if (q._kind == Query::QUERY_SELECT)
			{
				Cursor cursor = await this.query(sql, params, db_settings);
				return cursor;
			}
			else if (q._kind == Query::RAW_QUERY)
			{
				Cursor cursor = await this.query(sql, params, db_settings);
				return cursor;
			}
		}
		
		return null;
	}
	
	
	
	/**
	 * Convert filter
	 */
	list<Collection, Dict> convertFilter(Collection<QueryFilter> filter, int field_index = 0)
	{
		Map items = new Map();
		Vector where = new Vector();
		for (int i=0; i<filter.count(); i++)
		{
			QueryFilter item = filter[i];
			string field_name = item.field_name |> default string "";
			string op = item.op |> default string "=";
			string value = item.value;
			
			if (rtl::isEmpty(field_name) and rtl::isEmpty(op))
			{
				continue;
			}
			
			/* or */
			if (field_name == "\$or")
			{
				Vector arr_where = new Vector();
				Collection arr = item[1] |> default Collection [];
				for (int i=0; i<arr.count(); i++)
				{
					Collection<list> filter_or = arr[i];
					list res = this.convertFilter(filter_or, field_index);
					Collection where_or = res[0];
					Dict items_or = res[1];
					field_index = res[2];
					arr_where.pushValue( rs::join(" AND ", where_or) );
					items = items.concat(items_or);
				}
				where.pushValue( "(" ~ rs::join(" OR ", arr_where) ~ ")" );
				continue;
			}
			
			/* Check operation */
			if 
			(
				op != "=" and op != "!=" and op != ">=" and op != "<=" and op != "<" and op != ">"
			)
			{
				op = "=";
			}
			
			if (rtl::isString(value) or rtl::isInt(value) or rtl::isBool(value))
			{
				string field_key = this.convertParamsKey("where_" ~ field_name ~ "_" ~ field_index);
				where.pushValue(this.escape(field_name) ~ " " ~ op ~ " :" ~ field_key);
				items.setValue(field_key, value);
				field_index++;
			}
			else if (value instanceof Collection)
			{
				Vector keys = new Vector();
				for (int i=0; i<value.count(); i++)
				{
					string v = value[i];
					string field_key = this.convertParamsKey("where_" ~ field_name ~ "_" ~ i ~ "_" ~ field_index);
					keys.pushValue(":" ~ field_key);
					items.setValue(field_key, v);
					field_index++;
				}
				where.pushValue(this.escape(field_name) ~ " in (" ~ rs::join(",", keys) ~ ")");
			}
			else if (value === null)
			{
				if (op == "!=") where.pushValue(this.escape(field_name) ~ " is not null");
				else where.pushValue(this.escape(field_name) ~ " is null");
			}
		}
		
		return [where.toCollection(), items.toDict(), field_index];
	}
	
	
	
	/**
	 * Convert params key
	 */
	string convertParamsKey(string field_key)
	{
		field_key = rs::replace(".", "_", field_key);
		return field_key;
	}
	
	
	
	/**
	 * Escape
	 */
	string escape(string item)
	{
		return item;
	}
	
	
	
	/**
	 * Quote
	 */
	string quote(string item)
	{
		#switch
		#case ifcode PHP then
		return "`" . $this->pdo->quote($item) . "`";
		#endswitch
		return "";
	}
}