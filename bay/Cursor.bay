/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM.MySQL;

use Runtime.ORM.MySQL.Connection;


class Cursor
{
	protected var conn;
	protected var sql;
	protected var st;
	
	
	/**
	 * Constructor
	 */
	public void constructor(Connection conn, string sql, var st)
	{
		this.conn = conn;
		this.sql = sql;
		this.st = st;
	}
	
	
	
	/**
	 * Quote string
	 */
	string quote(string value)
	{
		#switch
		#case ifcode PHP then
		return $this->conn->pdo->quote($value);
		#endswitch
		return "";
	}
	
	
	
	/**
	 * Return sql
	 */
	string getSql(Dict params = null) =>
		(params == null) ? this.sql :
			params.reduce
			(
				string (string sql, string value, string key) =>
					rs::replace(":" ~ key, this.quote(value), sql)
				,
				this.sql
			)
	;
	
	
	
	/**
	 * Execute query
	 */
	async Cursor execute(Dict params = null, bool log_query = false)
	{
		if (log_query)
		{
			string sql = this.getSql(params);
			log(sql);
		}
		
		#switch
		#case ifcode PHP then
		
		if ($this->st != null)
		{
			$this->st->execute($params != null ? $params->_map : []);
		}
		
		#endswitch
		
		return this;
	}
	
	
	
	/**
	 * Fetch next row
	 */
	async Dict fetch(fn f = null)
	{
		Dict row = null;
		
		#switch
		#case ifcode PHP then
		
		if ($this->st == null) return null;
		
		$row = $this->st->fetch(\PDO::FETCH_ASSOC);
		$row = ($row != null) ? \Runtime\Dict::from($row) : null;
		
		#endswitch
		
		if (row and f) row = f(row);
		return row;
	}
	
	
	
	/**
	 * Fetch one
	 */
	async Dict fetchOne(fn f = null)
	{
		Dict row = await this.fetch();
		if (row and f) row = f(row);
		return row;
	}
	
	
	
	/**
	 * Fetch all rows
	 */
	async Dict fetchAll(fn f = null)
	{
		Vector<Dict> items = new Vector();
		while (true)
		{
			Dict row = await this.fetch();
			if (row == null)
			{
				break;
			}
			if (f)
			{
				row = f(row);
			}
			items.push(row);
		}
		
		return items.toCollection();
	}
	
	
	
	/**
	 * Close cursor
	 */
	async void close()
	{
		#switch
		#case ifcode PHP then
		
		$this->st->closeCursor();
		$this->st = null;
		
		#endswitch
	}
	
	
	
	/**
	 * Get one
	 */
	static async void getOne(Cursor c)
	{
		Dict row = await c.fetchOne();
		await c.close();
		return row;
	}
	
	
	
	/**
	 * Get all
	 */
	static async void getAll(Cursor c)
	{
		Collection<Dict> items = await c.fetchAll();
		await c.close();
		return items;
	}
	
	
	
	/**
	 * Close cursor
	 */
	static async void end(Cursor c)
	{
		await c.close();
	}
}